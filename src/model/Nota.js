/**
 * OpenAPI Notastore
 * This is a sample server Notastore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tag from './Tag';

/**
 * The Nota model module.
 * @module model/Nota
 * @version 1.0.0
 */
class Nota {
    /**
     * Constructs a new <code>Nota</code>.
     * A nota for sale in the nota store
     * @alias module:model/Nota
     * @param name {String} 
     * @param photoUrls {Array.<String>} 
     */
    constructor(name, photoUrls) { 
        
        Nota.initialize(this, name, photoUrls);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, photoUrls) { 
        obj['name'] = name;
        obj['photoUrls'] = photoUrls;
    }

    /**
     * Constructs a <code>Nota</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Nota} obj Optional instance to populate.
     * @return {module:model/Nota} The populated <code>Nota</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Nota();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('photoUrls')) {
                obj['photoUrls'] = ApiClient.convertToType(data['photoUrls'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Nota</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Nota</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Nota.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['photoUrls'])) {
            throw new Error("Expected the field `photoUrls` to be an array in the JSON data but got " + data['photoUrls']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Nota.RequiredProperties = ["name", "photoUrls"];

/**
 * @member {Number} id
 */
Nota.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Nota.prototype['name'] = undefined;

/**
 * @member {Array.<String>} photoUrls
 */
Nota.prototype['photoUrls'] = undefined;

/**
 * @member {Array.<module:model/Tag>} tags
 */
Nota.prototype['tags'] = undefined;

/**
 * nota status in the store
 * @member {module:model/Nota.StatusEnum} status
 */
Nota.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Nota['StatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "sold"
     * @const
     */
    "sold": "sold"
};



export default Nota;

